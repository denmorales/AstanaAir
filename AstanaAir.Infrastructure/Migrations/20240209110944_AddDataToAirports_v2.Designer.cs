// <auto-generated />
using System;
using AstanaAir.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AstanaAir.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240209110944_AddDataToAirports_v2")]
    partial class AddDataToAirports_v2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AstanaAir.Domain.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Offset")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VNK",
                            Name = "Внуково",
                            Offset = (short)3
                        },
                        new
                        {
                            Id = 2,
                            Code = "EKB",
                            Name = "Екатеринбург",
                            Offset = (short)5
                        },
                        new
                        {
                            Id = 3,
                            Code = "SRT",
                            Name = "Саратов",
                            Offset = (short)4
                        },
                        new
                        {
                            Id = 4,
                            Code = "ALM",
                            Name = "Алматы",
                            Offset = (short)6
                        },
                        new
                        {
                            Id = 5,
                            Code = "MGD",
                            Name = "Магадан",
                            Offset = (short)11
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 14, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3712), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 2, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3741), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Аэропорт2",
                            Origin = "Аэропорт1",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 1001,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 14, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3750), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 2, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3751), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Аэропорт4",
                            Origin = "Аэропорт3",
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 1002,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 14, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3753), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 6, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3754), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Магадан",
                            Origin = "Внуково",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 1003,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 14, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3755), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 9, 16, 9, 44, 748, DateTimeKind.Unspecified).AddTicks(3756), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Алматы",
                            Origin = "Екатеринбург",
                            Status = "InTime"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "User"
                        },
                        new
                        {
                            Id = 1,
                            Code = "Moderator"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = "2113177F42C22FA0B7DAFA2A0386DAC5391752676B695C6DD0FB49684815854A047FCF4F028E92DECF971130899437F755420A07A5BE577EA4D87CE9447105EB",
                            RoleId = 2,
                            Salt = new byte[] { 28, 216, 180, 126, 231, 181, 173, 108, 242, 202, 52, 144, 13, 117, 207, 113, 37, 104, 135, 108, 222, 197, 190, 144, 61, 81, 74, 202, 171, 122, 88, 78, 70, 222, 0, 163, 241, 118, 170, 180, 118, 214, 78, 236, 158, 124, 74, 38, 176, 70, 204, 192, 251, 67, 59, 81, 213, 27, 46, 153, 81, 201, 52, 31 },
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Hash = "8695581FE1348748FF4DC442FBCD26B02C2BE61AEE8CDE4F4131FE1AB4CE0D1C00F49ABA07C4ACE3BEE7899E2EA4FC38E146B1FC450DF4B6F549A487F3320614",
                            RoleId = 1,
                            Salt = new byte[] { 71, 56, 198, 162, 136, 73, 106, 112, 101, 232, 102, 174, 14, 252, 24, 129, 31, 138, 68, 149, 0, 172, 209, 254, 184, 61, 91, 207, 126, 118, 156, 4, 69, 127, 242, 60, 242, 25, 209, 183, 140, 2, 78, 232, 249, 186, 150, 175, 174, 43, 131, 140, 252, 46, 4, 3, 109, 72, 123, 102, 135, 100, 126, 48 },
                            UserName = "moderator1"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.User", b =>
                {
                    b.HasOne("AstanaAir.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
