// <auto-generated />
using System;
using AstanaAir.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AstanaAir.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240209125631_ChangeContext")]
    partial class ChangeContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AstanaAir.Domain.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Offset")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VNK",
                            Name = "Внуково",
                            Offset = (short)3
                        },
                        new
                        {
                            Id = 2,
                            Code = "EKB",
                            Name = "Екатеринбург",
                            Offset = (short)5
                        },
                        new
                        {
                            Id = 3,
                            Code = "SRT",
                            Name = "Саратов",
                            Offset = (short)4
                        },
                        new
                        {
                            Id = 4,
                            Code = "ALM",
                            Name = "Алматы",
                            Offset = (short)6
                        },
                        new
                        {
                            Id = 5,
                            Code = "MGD",
                            Name = "Магадан",
                            Offset = (short)11
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 15, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1697), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 3, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1723), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Аэропорт2",
                            Origin = "Аэропорт1",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 1001,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 15, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1734), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 3, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1735), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Аэропорт4",
                            Origin = "Аэропорт3",
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 1002,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 15, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1737), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 7, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1737), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Магадан",
                            Origin = "Внуково",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 1003,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 15, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1739), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 9, 17, 56, 31, 768, DateTimeKind.Unspecified).AddTicks(1739), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Алматы",
                            Origin = "Екатеринбург",
                            Status = "InTime"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "User"
                        },
                        new
                        {
                            Id = 1,
                            Code = "Moderator"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = "3B95F0CF766513ECBBCA7870E753B8019A93787FB40415B26C2EBCAED07723281087970F332EEB9DC625151840A92547CE51A55C6F68D2F1865D5033D3CE276C",
                            RoleId = 2,
                            Salt = new byte[] { 205, 72, 112, 252, 58, 227, 158, 112, 11, 254, 121, 105, 195, 236, 103, 248, 20, 212, 94, 181, 179, 140, 246, 113, 44, 55, 79, 87, 102, 235, 171, 154, 77, 0, 55, 50, 140, 207, 246, 213, 108, 243, 153, 3, 238, 57, 200, 72, 163, 251, 243, 2, 141, 138, 68, 157, 228, 156, 226, 186, 195, 109, 248, 129 },
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Hash = "00EB51B68787DFCCF321DECC440FCABC95E10D6805C4A2C60D8913C92BB891C0739642E395275B19A234D18D595A05DDFB2B7DF2AB0DFA552064A0D1F153373C",
                            RoleId = 1,
                            Salt = new byte[] { 247, 14, 130, 84, 133, 167, 156, 85, 14, 151, 58, 30, 30, 195, 13, 184, 213, 192, 242, 135, 69, 209, 210, 38, 228, 190, 62, 236, 157, 227, 136, 73, 237, 216, 37, 160, 162, 141, 64, 66, 99, 73, 79, 182, 13, 135, 96, 68, 164, 121, 253, 176, 216, 181, 50, 245, 193, 219, 94, 234, 0, 20, 226, 102 },
                            UserName = "moderator1"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.User", b =>
                {
                    b.HasOne("AstanaAir.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
