// <auto-generated />
using System;
using AstanaAir.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AstanaAir.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240209101515_AddDataToAirports")]
    partial class AddDataToAirports
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AstanaAir.Domain.Entities.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Offset")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VNK",
                            Name = "Внуково",
                            Offset = (short)3
                        },
                        new
                        {
                            Id = 2,
                            Code = "EKB",
                            Name = "Екатеринбург",
                            Offset = (short)5
                        },
                        new
                        {
                            Id = 3,
                            Code = "SRT",
                            Name = "Саратов",
                            Offset = (short)4
                        },
                        new
                        {
                            Id = 4,
                            Code = "ALM",
                            Name = "Алматы",
                            Offset = (short)6
                        },
                        new
                        {
                            Id = 5,
                            Code = "MGD",
                            Name = "Магадан",
                            Offset = (short)11
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Departure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 13, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1186), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 1, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1211), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Аэропорт2",
                            Origin = "Аэропорт1",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 1001,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 13, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1220), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 1, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1221), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Аэропорт4",
                            Origin = "Аэропорт3",
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 1002,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 13, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1223), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 10, 5, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1223), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Магадан",
                            Origin = "Внуково",
                            Status = "InTime"
                        },
                        new
                        {
                            Id = 1003,
                            Arrival = new DateTimeOffset(new DateTime(2024, 2, 9, 13, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1224), new TimeSpan(0, 3, 0, 0, 0)),
                            Departure = new DateTimeOffset(new DateTime(2024, 2, 9, 15, 15, 15, 127, DateTimeKind.Unspecified).AddTicks(1225), new TimeSpan(0, 3, 0, 0, 0)),
                            Destination = "Астана",
                            Origin = "Екатеринбург",
                            Status = "InTime"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "User"
                        },
                        new
                        {
                            Id = 1,
                            Code = "Moderator"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = "D25155FF0A6E516CC453A58082BB365DBAFCBA0497EE95EDF9A8FD6D518EDC9E611E1F3AB921D8C482719B8643715E62405B9B750112D71462D1C699F8F46E88",
                            RoleId = 2,
                            Salt = new byte[] { 167, 80, 239, 146, 255, 30, 139, 159, 217, 238, 183, 214, 144, 228, 217, 33, 247, 252, 238, 196, 238, 214, 59, 134, 137, 171, 94, 136, 235, 124, 136, 239, 248, 133, 161, 138, 76, 4, 237, 18, 193, 103, 104, 28, 94, 135, 93, 186, 201, 58, 99, 57, 176, 110, 248, 163, 84, 103, 209, 46, 152, 239, 138, 137 },
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Hash = "DE0188EDBF4ACB1D81ADCB6B11F6A97084A2B93249FA8373F14A60E2EBEF6481417AE5A6281F9035DF1B22C4696532080ABF21F51B3F59EA17EBFE16D0E6924D",
                            RoleId = 1,
                            Salt = new byte[] { 53, 178, 168, 62, 202, 65, 223, 94, 197, 216, 69, 101, 210, 74, 6, 89, 167, 240, 198, 149, 167, 80, 138, 136, 239, 11, 253, 10, 183, 3, 155, 8, 82, 49, 250, 31, 76, 235, 117, 152, 9, 151, 201, 146, 34, 77, 91, 71, 33, 255, 43, 177, 56, 194, 2, 87, 32, 221, 219, 47, 205, 232, 3, 161 },
                            UserName = "moderator1"
                        });
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.User", b =>
                {
                    b.HasOne("AstanaAir.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AstanaAir.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
